// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyTest.Business.Models.Data;

#nullable disable

namespace SurveyTest.Business.Migrations
{
    [DbContext(typeof(DataDbContext))]
    partial class DataDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("34b33673-0d07-47be-9294-3aaa1974b290"),
                            RoleId = new Guid("9373ea95-3192-404c-b029-ef1f4b1bb847")
                        },
                        new
                        {
                            UserId = new Guid("b5edd0ef-62e8-4383-8c53-8bcc454503ec"),
                            RoleId = new Guid("6e713abd-15ae-4232-9d2f-2a644bb70165")
                        },
                        new
                        {
                            UserId = new Guid("0394a8d4-905e-4e2d-a865-71e0b6545362"),
                            RoleId = new Guid("6e713abd-15ae-4232-9d2f-2a644bb70165")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("AppUserTokens", (string)null);
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.AppRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9373ea95-3192-404c-b029-ef1f4b1bb847"),
                            ConcurrencyStamp = "6e70dbe1-760d-4e64-bf98-1f2f3f84669d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("6e713abd-15ae-4232-9d2f-2a644bb70165"),
                            ConcurrencyStamp = "bfba435c-ef4c-4268-ace6-994bc74b9031",
                            Name = "Users",
                            NormalizedName = "USERS"
                        });
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.AppUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IDSV")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("34b33673-0d07-47be-9294-3aaa1974b290"),
                            AccessFailedCount = 0,
                            Address = "Hòa Quý, Ngũ Hành Sơn, Tp.Đà Nẵng",
                            ConcurrencyStamp = "5b6f774a-12d5-41f9-9ff1-10c4c1d0deda",
                            Email = "12345@hypercoder.tech",
                            EmailConfirmed = true,
                            Firstname = "Nam",
                            IDSV = 12345,
                            Lastname = "Trần Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "12345@HYPERCODER.TECH",
                            NormalizedUserName = "12345@hypercoder.tech",
                            PasswordHash = "AQAAAAEAACcQAAAAEJFWkITh+klFTCQIh1rwmzjFKoxA6YTX4SEbLBToG3ENBKFWvOdjn/09HdQ3AMDB4Q==",
                            PhoneNumber = "0968354148",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "12345@hypercoder.tech"
                        },
                        new
                        {
                            Id = new Guid("b5edd0ef-62e8-4383-8c53-8bcc454503ec"),
                            AccessFailedCount = 0,
                            Address = "Hòa Quý, Ngũ Hành Sơn, Tp.Đà Nẵng",
                            ConcurrencyStamp = "f742650d-f3dc-4a24-92f6-093a36dc4e71",
                            Email = "44444@hypercoder.tech",
                            EmailConfirmed = true,
                            Firstname = "A",
                            IDSV = 44444,
                            Lastname = "Trần Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "44444@HYPERCODER.TECH",
                            NormalizedUserName = "44444@hypercoder.tech",
                            PasswordHash = "AQAAAAEAACcQAAAAENq5pRySQ25DeqqVisBf4PCRPvDw0qHnGCxzToRN/JZHf3uNd3kGUTUGG3eHU+S/fQ==",
                            PhoneNumber = "0968354148",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "44444@hypercoder.tech"
                        },
                        new
                        {
                            Id = new Guid("0394a8d4-905e-4e2d-a865-71e0b6545362"),
                            AccessFailedCount = 0,
                            Address = "Hòa Quý, Ngũ Hành Sơn, Tp.Đà Nẵng",
                            ConcurrencyStamp = "b13534e8-083f-4f8e-8328-acaa16f2ff0a",
                            Email = "55555@hypercoder.tech",
                            EmailConfirmed = true,
                            Firstname = "B",
                            IDSV = 55555,
                            Lastname = "Trần Thanh",
                            LockoutEnabled = false,
                            NormalizedEmail = "55555@HYPERCODER.TECH",
                            NormalizedUserName = "55555@hypercoder.tech",
                            PasswordHash = "AQAAAAEAACcQAAAAEEleQFDITNG5ANCspktXCUxJm03fpVjnPuvvbee3h8eW+3Z6wbXL2//S83BttVx/3g==",
                            PhoneNumber = "0968354148",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "55555@hypercoder.tech"
                        });
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdFormQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdFormQuestionId");

                    b.ToTable("FormAnswer");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdFormId");

                    b.ToTable("FormQuestion");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdFormId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdFormId");

                    b.ToTable("FormRequest");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormRequestAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdFormAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdFormRequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdFormAnswerId");

                    b.HasIndex("IdFormRequestId");

                    b.ToTable("FormRequestAnswer");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.Forms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Publish")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdUserId");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormTablet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdFormQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdTabletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdFormQuestionId");

                    b.HasIndex("IdTabletId");

                    b.ToTable("FormTablet");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.Tablet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tablet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9eafd625-3fda-40e9-9d03-4855aa5a31ba"),
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3078),
                            CreatedTime = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3091),
                            DeletedBy = "",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3092),
                            ModifiedTime = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3096),
                            Name = "Chọn",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("4ed8b799-7b13-492b-a0df-d301d5e93fdb"),
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3106),
                            CreatedTime = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3107),
                            DeletedBy = "",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3107),
                            ModifiedTime = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3108),
                            Name = "Bình chọn",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("145bc706-9512-4e95-a458-a0f9c1a88525"),
                            CreatedBy = "",
                            CreatedDate = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3114),
                            CreatedTime = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3114),
                            DeletedBy = "",
                            IsActive = false,
                            IsDeleted = false,
                            ModifiedBy = "",
                            ModifiedDate = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3115),
                            ModifiedTime = new DateTime(2023, 3, 15, 6, 16, 54, 817, DateTimeKind.Local).AddTicks(3115),
                            Name = "Dữ liệu",
                            Type = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.AppRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.AppRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyTest.Business.Models.Entity.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.AppUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormAnswer", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.FormQuestion", "IdFormQuestion")
                        .WithMany()
                        .HasForeignKey("IdFormQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdFormQuestion");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormQuestion", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.Forms", "IdForm")
                        .WithMany()
                        .HasForeignKey("IdFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdForm");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormRequest", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.Forms", "IdForm")
                        .WithMany()
                        .HasForeignKey("IdFormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdForm");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormRequestAnswer", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.FormAnswer", "IdFormAnswer")
                        .WithMany()
                        .HasForeignKey("IdFormAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyTest.Business.Models.Entity.FormRequest", "IdFormRequest")
                        .WithMany()
                        .HasForeignKey("IdFormRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdFormAnswer");

                    b.Navigation("IdFormRequest");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.Forms", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.AppUsers", "IdUser")
                        .WithMany()
                        .HasForeignKey("IdUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdUser");
                });

            modelBuilder.Entity("SurveyTest.Business.Models.Entity.FormTablet", b =>
                {
                    b.HasOne("SurveyTest.Business.Models.Entity.FormQuestion", "IdFormQuestion")
                        .WithMany()
                        .HasForeignKey("IdFormQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SurveyTest.Business.Models.Entity.Tablet", "IdTablet")
                        .WithMany()
                        .HasForeignKey("IdTabletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IdFormQuestion");

                    b.Navigation("IdTablet");
                });
#pragma warning restore 612, 618
        }
    }
}
